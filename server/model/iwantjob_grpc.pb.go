// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbClient is the client API for Db service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbClient interface {
	GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*List, error)
	CreateCube(ctx context.Context, in *CreateCubeReq, opts ...grpc.CallOption) (*Cube, error)
	UploadImage(ctx context.Context, in *UploadImageReq, opts ...grpc.CallOption) (*ImageResp, error)
	StreamList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (Db_StreamListClient, error)
}

type dbClient struct {
	cc grpc.ClientConnInterface
}

func NewDbClient(cc grpc.ClientConnInterface) DbClient {
	return &dbClient{cc}
}

func (c *dbClient) GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/model.Db/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) CreateCube(ctx context.Context, in *CreateCubeReq, opts ...grpc.CallOption) (*Cube, error) {
	out := new(Cube)
	err := c.cc.Invoke(ctx, "/model.Db/CreateCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) UploadImage(ctx context.Context, in *UploadImageReq, opts ...grpc.CallOption) (*ImageResp, error) {
	out := new(ImageResp)
	err := c.cc.Invoke(ctx, "/model.Db/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbClient) StreamList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (Db_StreamListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Db_ServiceDesc.Streams[0], "/model.Db/StreamList", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbStreamListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Db_StreamListClient interface {
	Recv() (*CubeStream, error)
	grpc.ClientStream
}

type dbStreamListClient struct {
	grpc.ClientStream
}

func (x *dbStreamListClient) Recv() (*CubeStream, error) {
	m := new(CubeStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DbServer is the server API for Db service.
// All implementations must embed UnimplementedDbServer
// for forward compatibility
type DbServer interface {
	GetList(context.Context, *GetListReq) (*List, error)
	CreateCube(context.Context, *CreateCubeReq) (*Cube, error)
	UploadImage(context.Context, *UploadImageReq) (*ImageResp, error)
	StreamList(*GetListReq, Db_StreamListServer) error
	// mustEmbedUnimplementedDbServer()
}

// UnimplementedDbServer must be embedded to have forward compatible implementations.
type UnimplementedDbServer struct {
}

func (UnimplementedDbServer) GetList(context.Context, *GetListReq) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDbServer) CreateCube(context.Context, *CreateCubeReq) (*Cube, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCube not implemented")
}
func (UnimplementedDbServer) UploadImage(context.Context, *UploadImageReq) (*ImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedDbServer) StreamList(*GetListReq, Db_StreamListServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamList not implemented")
}
func (UnimplementedDbServer) mustEmbedUnimplementedDbServer() {}

// UnsafeDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbServer will
// result in compilation errors.
type UnsafeDbServer interface {
	mustEmbedUnimplementedDbServer()
}

func RegisterDbServer(s grpc.ServiceRegistrar, srv DbServer) {
	s.RegisterService(&Db_ServiceDesc, srv)
}

func _Db_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Db/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).GetList(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_CreateCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCubeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).CreateCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Db/CreateCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).CreateCube(ctx, req.(*CreateCubeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Db/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServer).UploadImage(ctx, req.(*UploadImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Db_StreamList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetListReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbServer).StreamList(m, &dbStreamListServer{stream})
}

type Db_StreamListServer interface {
	Send(*CubeStream) error
	grpc.ServerStream
}

type dbStreamListServer struct {
	grpc.ServerStream
}

func (x *dbStreamListServer) Send(m *CubeStream) error {
	return x.ServerStream.SendMsg(m)
}

// Db_ServiceDesc is the grpc.ServiceDesc for Db service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Db_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.Db",
	HandlerType: (*DbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _Db_GetList_Handler,
		},
		{
			MethodName: "CreateCube",
			Handler:    _Db_CreateCube_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _Db_UploadImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamList",
			Handler:       _Db_StreamList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/iwantjob.proto",
}

// MessagerClient is the client API for Messager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagerClient interface {
	GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*Messages, error)
	CreateMessage(ctx context.Context, in *CreateMessageReq, opts ...grpc.CallOption) (*Message, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...grpc.CallOption) (*Message, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageReq, opts ...grpc.CallOption) (*DeletedMessage, error)
	StreamMessages(ctx context.Context, in *StreamMessagesReq, opts ...grpc.CallOption) (Messager_StreamMessagesClient, error)
}

type messagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagerClient(cc grpc.ClientConnInterface) MessagerClient {
	return &messagerClient{cc}
}

func (c *messagerClient) GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/model.Messager/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagerClient) CreateMessage(ctx context.Context, in *CreateMessageReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/model.Messager/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagerClient) UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/model.Messager/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagerClient) DeleteMessage(ctx context.Context, in *DeleteMessageReq, opts ...grpc.CallOption) (*DeletedMessage, error) {
	out := new(DeletedMessage)
	err := c.cc.Invoke(ctx, "/model.Messager/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagerClient) StreamMessages(ctx context.Context, in *StreamMessagesReq, opts ...grpc.CallOption) (Messager_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messager_ServiceDesc.Streams[0], "/model.Messager/StreamMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagerStreamMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messager_StreamMessagesClient interface {
	Recv() (*StreamedMessahge, error)
	grpc.ClientStream
}

type messagerStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *messagerStreamMessagesClient) Recv() (*StreamedMessahge, error) {
	m := new(StreamedMessahge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagerServer is the server API for Messager service.
// All implementations must embed UnimplementedMessagerServer
// for forward compatibility
type MessagerServer interface {
	GetMessages(context.Context, *GetMessagesReq) (*Messages, error)
	CreateMessage(context.Context, *CreateMessageReq) (*Message, error)
	UpdateMessage(context.Context, *UpdateMessageReq) (*Message, error)
	DeleteMessage(context.Context, *DeleteMessageReq) (*DeletedMessage, error)
	StreamMessages(*StreamMessagesReq, Messager_StreamMessagesServer) error
	// mustEmbedUnimplementedMessagerServer()
}

// UnimplementedMessagerServer must be embedded to have forward compatible implementations.
type UnimplementedMessagerServer struct {
}

func (UnimplementedMessagerServer) GetMessages(context.Context, *GetMessagesReq) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMessagerServer) CreateMessage(context.Context, *CreateMessageReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedMessagerServer) UpdateMessage(context.Context, *UpdateMessageReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedMessagerServer) DeleteMessage(context.Context, *DeleteMessageReq) (*DeletedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessagerServer) StreamMessages(*StreamMessagesReq, Messager_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessagerServer) mustEmbedUnimplementedMessagerServer() {}

// UnsafeMessagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagerServer will
// result in compilation errors.
type UnsafeMessagerServer interface {
	mustEmbedUnimplementedMessagerServer()
}

func RegisterMessagerServer(s grpc.ServiceRegistrar, srv MessagerServer) {
	s.RegisterService(&Messager_ServiceDesc, srv)
}

func _Messager_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagerServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Messager/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagerServer).GetMessages(ctx, req.(*GetMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messager_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagerServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Messager/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagerServer).CreateMessage(ctx, req.(*CreateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messager_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagerServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Messager/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagerServer).UpdateMessage(ctx, req.(*UpdateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messager_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagerServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Messager/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagerServer).DeleteMessage(ctx, req.(*DeleteMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messager_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessagesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagerServer).StreamMessages(m, &messagerStreamMessagesServer{stream})
}

type Messager_StreamMessagesServer interface {
	Send(*StreamedMessahge) error
	grpc.ServerStream
}

type messagerStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *messagerStreamMessagesServer) Send(m *StreamedMessahge) error {
	return x.ServerStream.SendMsg(m)
}

// Messager_ServiceDesc is the grpc.ServiceDesc for Messager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.Messager",
	HandlerType: (*MessagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessages",
			Handler:    _Messager_GetMessages_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Messager_CreateMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _Messager_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Messager_DeleteMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _Messager_StreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/iwantjob.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	SingUp(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/model.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SingUp(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/model.AuthService/SingUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/model.AuthService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	SingUp(context.Context, *LoginRequest) (*LoginResponse, error)
	Refresh(context.Context, *RefreshReq) (*LoginResponse, error)
	// mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) SingUp(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingUp not implemented")
}
func (UnimplementedAuthServiceServer) Refresh(context.Context, *RefreshReq) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SingUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SingUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AuthService/SingUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SingUp(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.AuthService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Refresh(ctx, req.(*RefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "SingUp",
			Handler:    _AuthService_SingUp_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AuthService_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/iwantjob.proto",
}
